// <auto-generated />
using System;
using LectureRoomMgt.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LectureRoomMgt.Migrations
{
    [DbContext(typeof(WisdomAppDBContext))]
    partial class WisdomAppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LectureRoomMgt.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eWisdomId")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Claims.ClaimAction", b =>
                {
                    b.Property<string>("ClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("ClaimId");

                    b.HasIndex("GroupId");

                    b.ToTable("ClaimActions");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Claims.ClaimGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupId");

                    b.ToTable("ClaimGroups");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.CommunicationType", b =>
                {
                    b.Property<string>("ComType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("ComType");

                    b.ToTable("CommunicationTypes");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Courses.LecturerCourse", b =>
                {
                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiscontinuedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.HasKey("LecturerId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("LecturerCourses");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.ErrrorLog.ErrorLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("DateLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("LogId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Events.MasterEvent", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("EventId");

                    b.ToTable("MasterEvents");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Events.UniversityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "StartDate", "EndDate")
                        .IsUnique();

                    b.ToTable("UniversityEvents");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Lecturers.Lecturer", b =>
                {
                    b.Property<string>("LecturerId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AccessCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("HomeTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<string>("LecturerStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OfficeTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfileImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Qualifications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Username")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("LecturerId");

                    b.HasIndex("AccessCode")
                        .IsUnique()
                        .HasFilter("[AccessCode] IS NOT NULL");

                    b.HasIndex("Gender");

                    b.HasIndex("LecturerId")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Lecturers.LecturerFaculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DiscontinuedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("LecturerId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerFaculties");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterCompany", b =>
                {
                    b.Property<string>("CompID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTelephone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompID");

                    b.ToTable("MasterCompanies");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterDesignation", b =>
                {
                    b.Property<string>("Designation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Designation");

                    b.ToTable("MasterDesignations");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterGender", b =>
                {
                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Gender");

                    b.ToTable("MasterGenders");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterTitle", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Title");

                    b.ToTable("MasterTitles");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BlockName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("BlockName", "FacultyId")
                        .IsUnique()
                        .HasFilter("[BlockName] IS NOT NULL AND [FacultyId] IS NOT NULL");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FacilityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FacilityCategories");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FacilityCommon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FacilityCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InUse")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCategoryId");

                    b.ToTable("FacilitiesCommon");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FacultyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Head")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyName", "Code")
                        .IsUnique()
                        .HasFilter("[FacultyName] IS NOT NULL AND [Code] IS NOT NULL");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FacultyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactDes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Type");

                    b.ToTable("FacultyContacts");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FeedBackGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmitedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedBackGenerals");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FeedBackRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseType")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmitedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("FeedBackRooms");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("FloorName", "BlockId")
                        .IsUnique()
                        .HasFilter("[FloorName] IS NOT NULL AND [BlockId] IS NOT NULL");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("RoomName", "FloorId")
                        .IsUnique()
                        .HasFilter("[RoomName] IS NOT NULL AND [FloorId] IS NOT NULL");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCategoryId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomImageDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImageDefaults");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("LecturersLecturerId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("RatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturersLecturerId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomRatings");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomReservation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RecurrenceException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecurrenceID")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomReservations");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.StatusOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StatusText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusOptions");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Sequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("NumOfCharacters")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("numCurVal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("numIncBy")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("numMaxVal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("numMinVal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("varcharPreFix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("varcharPrefixStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("varcharSeqName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Staff.AttendanceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AttendedDate")
                        .HasColumnType("date");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("TimeIn")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TimeOut")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("AttendanceDetails");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Staff.AttendanceMaster", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessedDate")
                        .HasColumnType("date");

                    b.HasKey("ProcessId");

                    b.HasIndex("ProcessedDate")
                        .IsUnique();

                    b.ToTable("AttendanceMasters");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Staff.Employee", b =>
                {
                    b.Property<string>("EmpId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AccessCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("HomeTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OfficeTel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfileImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Username")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("EmpId");

                    b.HasIndex("AccessCode");

                    b.HasIndex("Designation");

                    b.HasIndex("Gender");

                    b.HasIndex("Title");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Taask", b =>
                {
                    b.Property<int>("TaaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecurrenceID")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaaskID");

                    b.HasIndex("LecturerId");

                    b.HasIndex("RecurrenceID");

                    b.HasIndex("RoomId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.TempLogin", b =>
                {
                    b.Property<string>("AccessCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdmissionNo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ApproveddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<string>("NIC")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegisteredState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("User")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("AccessCode");

                    b.ToTable("TempLogins");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.UserLoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Claims.ClaimAction", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Claims.ClaimGroup", "ClaimGroup")
                        .WithMany("ClaimActions")
                        .HasForeignKey("GroupId");

                    b.Navigation("ClaimGroup");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Courses.Course", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Lecturers.Lecturer", null)
                        .WithMany("Course")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Courses.LecturerCourse", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Courses.Course", "Course")
                        .WithMany("LecturerCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.Lecturers.Lecturer", "Lecturer")
                        .WithMany("LecturerCourses")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Events.UniversityEvent", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Events.MasterEvent", "MasterEvent")
                        .WithMany("UniversityEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterEvent");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Lecturers.Lecturer", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.TempLogin", "TempLogin")
                        .WithOne("Lecturer")
                        .HasForeignKey("LectureRoomMgt.Models.Lecturers.Lecturer", "AccessCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LectureRoomMgt.Models.MasterGender", "MasterGender")
                        .WithMany("Lecturers")
                        .HasForeignKey("Gender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.MasterTitle", "MasterTitle")
                        .WithMany("Lecturers")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MasterGender");

                    b.Navigation("MasterTitle");

                    b.Navigation("TempLogin");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Lecturers.LecturerFaculty", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Faculty", "Faculty")
                        .WithMany("lecturerFaculties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.Lecturers.Lecturer", "Lecturer")
                        .WithMany("lecturerFaculties")
                        .HasForeignKey("LecturerId");

                    b.Navigation("Faculty");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Block", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Faculty", "Faculty")
                        .WithMany("Blocks")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FacilityCommon", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.FacilityCategory", "FacilityCategory")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityCategoryId");

                    b.Navigation("FacilityCategory");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FacultyContact", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Faculty", "Faculty")
                        .WithMany("FacultyContacts")
                        .HasForeignKey("FacultyId");

                    b.HasOne("LectureRoomMgt.Models.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("Type");

                    b.Navigation("CommunicationType");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FeedBackRoom", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany("FeedBackRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Floor", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Block", "Block")
                        .WithMany("Floors")
                        .HasForeignKey("BlockId");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Room", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId");

                    b.HasOne("LectureRoomMgt.Models.Reservation.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId");

                    b.Navigation("Floor");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomFacility", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.FacilityCategory", "FacilityCategory")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("FacilityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityCategory");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomImage", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomImageDefault", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomRating", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Lecturers.Lecturer", "Lecturers")
                        .WithMany()
                        .HasForeignKey("LecturersLecturerId");

                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Lecturers");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomReservation", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("LectureRoomMgt.Models.Lecturers.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany("RoomReservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Staff.AttendanceDetail", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Staff.AttendanceMaster", "AttendanceMaster")
                        .WithMany("AttendanceDetails")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceMaster");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Staff.Employee", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.TempLogin", "TempLogin")
                        .WithMany()
                        .HasForeignKey("AccessCode");

                    b.HasOne("LectureRoomMgt.Models.MasterDesignation", "MasterDesignation")
                        .WithMany("Employees")
                        .HasForeignKey("Designation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.MasterGender", "MasterGender")
                        .WithMany("Employees")
                        .HasForeignKey("Gender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.MasterTitle", "MasterTitle")
                        .WithMany("Employees")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MasterDesignation");

                    b.Navigation("MasterGender");

                    b.Navigation("MasterTitle");

                    b.Navigation("TempLogin");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Taask", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.Lecturers.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");

                    b.HasOne("LectureRoomMgt.Models.Taask", "Recurrence")
                        .WithMany("InverseRecurrence")
                        .HasForeignKey("RecurrenceID");

                    b.HasOne("LectureRoomMgt.Models.Reservation.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Lecturer");

                    b.Navigation("Recurrence");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectureRoomMgt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LectureRoomMgt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Claims.ClaimGroup", b =>
                {
                    b.Navigation("ClaimActions");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Courses.Course", b =>
                {
                    b.Navigation("LecturerCourses");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Events.MasterEvent", b =>
                {
                    b.Navigation("UniversityEvents");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Lecturers.Lecturer", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("LecturerCourses");

                    b.Navigation("lecturerFaculties");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterDesignation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterGender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.MasterTitle", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Block", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.FacilityCategory", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("RoomFacilities");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Faculty", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("FacultyContacts");

                    b.Navigation("lecturerFaculties");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.Room", b =>
                {
                    b.Navigation("FeedBackRooms");

                    b.Navigation("RoomFacilities");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomReservations");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Reservation.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Staff.AttendanceMaster", b =>
                {
                    b.Navigation("AttendanceDetails");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.Taask", b =>
                {
                    b.Navigation("InverseRecurrence");
                });

            modelBuilder.Entity("LectureRoomMgt.Models.TempLogin", b =>
                {
                    b.Navigation("Lecturer");
                });
#pragma warning restore 612, 618
        }
    }
}
